using System;
using System.Collections.Generic;
using LiveCoding;

class Program
{
    static void Main(string[] args)
    {
        // Lista de enteros
        List<int> integers = new List<int> { 5, 3, 9, 1, 4 };
        SortList(integers);
        Console.WriteLine("Sorted integers: " + string.Join(", ", integers));

        // Lista de cadenas
        List<string> strings = new List<string> { "apple", "orange", "banana", "grape" };
        SortList(strings);
        Console.WriteLine("Sorted strings: " + string.Join(", ", strings));

        // Lista de números racionales
        List<Rational> rationals = new List<Rational>
        {
            new Rational(1, 2),
            new Rational(3, 4),
            new Rational(1, 3),
        };
        SortList(rationals);
        Console.WriteLine("Sorted rationals: " + string.Join(", ", rationals));

        // Lista de números complejos
        List<Complex> complexes = new List<Complex>
        {
            new Complex(3, 4), // Modulus = 5
            new Complex(1, 1), // Modulus = sqrt(2)
            new Complex(0, 2), // Modulus = 2
        };
        SortList(complexes);
        Console.WriteLine("Sorted complexes: " + string.Join(", ", complexes));

        // Lista de RPSLS
        List<Rpsls> rpslsList = new List<Rpsls>
        {
            new Rpsls(Rpsls.Hand.Scissors),
            new Rpsls(Rpsls.Hand.Rock),
            new Rpsls(Rpsls.Hand.Paper)
        };
        SortList(rpslsList);
        Console.WriteLine("Sorted RPSLS: " + string.Join(", ", rpslsList));
    }

    static void SortList<T>(List<T> list)
    {
        if (typeof(T) == typeof(int) || typeof(T) == typeof(string))
        {
            list.Sort();
        }
        else if (typeof(T) == typeof(Rational))
        {
            list.Sort((a, b) => ((Rational)(object)a).ToDouble().CompareTo(((Rational)(object)b).ToDouble()));
        }
        else if (typeof(T) == typeof(Complex))
        {
            list.Sort((a, b) => ((Complex)(object)a).Modulus().CompareTo(((Complex)(object)b).Modulus()));
        }
        else if (typeof(T) == typeof(Rpsls))
        {
            Console.WriteLine("Cannot sort RPSLS lists deterministically.");
        }
        else
        {
            throw new InvalidOperationException("Unsupported type for sorting.");
        }
    }
}
